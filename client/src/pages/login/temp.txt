import { Formik, useFormik } from 'formik';
import { useNavigate } from 'react-router-dom';
import * as Yup from 'yup';

import { useCallback } from 'react';

import Button from '../../components/buttons/button/Button';
import Form from '../../components/form/Form';
import Input from '../../components/inputs/input/Input';

function Login() {
  const navigate = useNavigate();
	const formik = useFormik({
    initialValues: {
      email:  '',
      password:  '',
    },

    validationSchema: Yup.object({
      firstName: Yup.string()
        .min(6, 'First Name is Too Short!')
        .max(50, 'First Name is Too Long!')
        .matches(/^[a-zA-Z]+$/, 'First Name must be only letters')
        .required('First Name is Required'),
      lastName: Yup.string()
        .min(1, 'Last Name Too Short!')
        .matches(/^[a-zA-Z]+$/, 'First Name must be only letters')
        .max(50, 'Last Name Too Long!')
        .required('Last Name is Required'),
      age: Yup.number()
        .min(18, 'Age is Too Young!')
        .max(100, 'Age is Too Long!')
        .required('Age is Required')

      /*     phone: Yup.string()
        .min(10, 'Phone is Too Short!')
        .max(10, 'Phone is Too Long!')
        .required('Phone is Required') */
    }),
    onSubmit: (values, actions) => {
      //  alert(JSON.stringify(values, null, 2));
      actions.setSubmitting(true);
    }
  });



  /*
  function handleSubmit(e) {
    //e.preventDefault();
    //👇🏻 saves the username to localstorage
    //localStorage.setItem('userId', formik.values.email);
    //👇🏻 redirects to the Tasks page.
    navigate('/tasks');
  } */
  const navigateToSignup = useCallback(() => {
    navigate('/signup');
  }, [navigate
	]);

  return (
    <section className='login container'>
      <Formik
        initialValues={{
          email: '',
          password: ''
        }}
        validationSchema={Yup.object({
          email: Yup.string()
            .email('Invalid Email address')
            .min(6, 'Email address is Too Short!')
            .max(50, 'Email address is Too Long!')
            .required('Email address is Required'),
          password: Yup.string()
            .min(6, 'Password Too Short!')
            .max(50, 'Password Too Long!')
            .required('Password is Required')
        })}
        // eslint-disable-next-line react/jsx-no-bind
        onSubmit={function submit(
          values: unknown,
          actions: { resetForm: () => void }
        ) {
          alert(JSON.stringify(values, null, 2));
          // 👇🏻 saves the username to localstorage
					actions.resetForm();
        }}>
        {formik => {
          return (
            <Form
              ariaLabel={'Login Form'}
              disabled={false}
              encType={'application/x-www-form-urlencoded'}
              inputs={[
                <Input
                  key='email-1'
                  correctMessage={''}
                  errorMessage={formik.errors.email as string}
                  hint={''}
                  isError={
                    formik.touched.email && formik.errors.email ? true : null
                  }
                  isTop={false}
                  label={'Email'}
                  name={'email'}
                  placeholder='Email'
                  size={0}
                  type='email'
                  value={formik.values.email as string}
                  onBlurFunc={formik.handleBlur}
                  onChangeFunc={formik.handleChange}
                />,
                <Input
                  key={'password-1'}
                  correctMessage={''}
                  errorMessage={formik.errors.password as string}
                  hint={''}
                  isError={
                    formik.touched.password && formik.errors.password
                      ? true
                      : null
                  }
                  isTop={false}
                  label={''}
                  name={'password'}
                  placeholder='Password'
                  size={0}
                  type='password'
                  value={formik.values.password as string}
                  onBlurFunc={formik.handleBlur}
                  onChangeFunc={formik.handleChange}
                />
              ]}
              isError={false}
              isLoading={false}
              method={'post'}
              subtitle='Login to your account'
              title='Login'
              onResetFunc={formik.handleReset}
             >
              <Button
								backgroundColor={'default-bg'}
								isDisabled={formik.isValid}
								label='Login'
								name='login'
								type='button'
								onClickFunc={async (e)=>{
							 formik.handleSubmit();
							 alert(formik.values.email+'first');
								await fetch('');
								}}              />
              <Button
								backgroundColor={'default-bg'}
								isDisabled={false}
								label='Register'
								name='register'
								type='button' onClickFunc={navigateToSignup}              />
            </Form>
          );
        }}
      </Formik>
    </section>
  );
}

export default Login;
